---
export const prerender = false;
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Modal from '../../components/modal.astro';

interface Colour {
	name: string;
	hex: string;
	blackBorder?: boolean;
	default?: boolean;
	unavailable?: boolean;
}
const availableColours: Colour[] = [
	{ name: 'Grey', hex: '#7F7F7F', unavailable: true },
	{ name: 'White', hex: '#fff', default: true, blackBorder: true },
	{ name: 'Purple', hex: '#673ab7' },
	{ name: 'Green', hex: '#2ba972', unavailable: true },
	{ name: 'Blue', hex: '#2182b3', unavailable: true },
];
const availableColoursJSON = JSON.stringify(availableColours);

const { user } = Astro.locals;
---

<Modal type='error' id='fileSize'>
	<div class='details-modal-title'>
		<h1>Error</h1>
	</div>
	<div class='details-modal-content'>
		<p>Make sure the file size is less than 25 MB. We are currently working on 50 MB file upload. Sorry for the inconvenience.</p>
	</div>
	<div class='details-modal-buttons'>
		<a class='button button-primary button-danger modal-close'>Got it!</a>
	</div>
</Modal>
<Modal type='error' id='fillInputsError'>
	<div class='details-modal-title'>
		<h1>Error</h1>
	</div>
	<div class='details-modal-content'>
		<p>Make sure you fill in every input on the page before sending the order (except for the 'Custom Message' input).</p>
	</div>
	<div class='details-modal-buttons'>
		<a class='button button-primary button-danger modal-close'>Got it!</a>
	</div>
</Modal>
<DashboardLayout title='New Order' sideBarPos={2}>
	<div class='content'>
		<div class='header'>
			<h1 class='title'>New Order</h1>
		</div>
		<div class='order'>
			<div class='basic'>
				<div class='email input-gradient'>
					<input type='email' class='gradient' id='userEmail' placeholder='Enter your email:' value={user.email} required />
					<div id='anim'>
						<span class='tooltip' data-tooltip='Enter a valid email.'>!</span>
					</div>
				</div>
				<div class='custom-message input-gradient'>
					<textarea id='customMessage' placeholder='Enter a message here (optional):'></textarea>
				</div>
				<div class='file input-gradient'>
					<label for='fileInput' id='drop-area'>
						<input class='gradient' type='file' id='fileInput' accept='.stl, .obj, .3mf' hidden />
						<div class='controls'>
							<div class='uploaded'>
								<h3>Uploaded <span></span></h3>
								<p></p>
							</div>

							<img src='/images/upload.svg' />
							<p>
								Drag and drop your .STL, .OBJ or .3MF<br />file here<br /><span
									>(Don't know what to print? Check out <a class='link' href='https://printables.com'>printables</a>!)</span
								>
							</p>
							<strong>or</strong>
							<a class='button button-primary button-blue'>Click here</a>
						</div>
					</label>
				</div>
				<div class='buttons'>
					<a id='next-page' class='button button-primary button-blue next-page'>Next</a>
				</div>
			</div>
			<div class='advanced'>
				<div class='colour-picker input-gradient'>
					<span class='colour-title'>Choose the plastic colour</span>
					<div class='color-checkboxes'></div>
				</div>
				<div class='plastic-type dropdown-input input-gradient'>
					<span class='dropdown-title'>Choose the plastic type</span>
					<div class='dropdown-options'>
						<div class='outline'>
							<input type='text' readonly />
							<label id='plasticType'>Plastic type</label>
						</div>
						<div class='dropdown input-with-dropdown'>
							<button type='button'></button>
							<ul class='dropdown-menu'>
								<li>
									<a class='dropdown-item outline-none' data-value='PLA'
										>PLA <span class='d-block text-muted small lh-sm'>Durable, lightweight and cheap</span></a
									>
								</li>
								<li>
									<a class='dropdown-item outline-none' data-value='PETG'
										>PETG <span class='d-block text-muted small lh-sm'>something idk</span></a
									>
								</li>
								<li>
									<a class='dropdown-item outline-none' data-value='another plastic'
										>another plastic <span class='d-block text-muted small lh-sm'>some description</span></a
									>
								</li>
							</ul>
						</div>
					</div>
				</div>
				<div class='layer-height dropdown-input input-gradient'>
					<span class='dropdown-title'>Choose the layer height</span>
					<div class='dropdown-options'>
						<div class='outline'>
							<input type='text' readonly />
							<label id='layerHeight'>Layer height</label>
						</div>
						<div class='dropdown input-with-dropdown'>
							<button type='button'></button>
							<ul class='dropdown-menu'>
								<li>
									<a class='dropdown-item outline-none' data-value='0.12mm'>0.12mm</a>
								</li>
								<li>
									<a class='dropdown-item outline-none' data-value='0.2mm'>0.2mm</a>
								</li>
								<li>
									<a class='dropdown-item outline-none' data-value='0.28mm'>0.28mm</a>
								</li>
								<li>
									<a class='dropdown-item outline-none' data-value='0.32mm'>0.32mm</a>
								</li>
							</ul>
						</div>
					</div>
				</div>
				<div class='infill range-slider input-gradient'>
					<span class='range-header'>
						Choose the infill percentage
						<span class='secondary-text'>25% recommended</span>
					</span>
					<div class='range'>
						<div class='range__slider'>
							<input id='infillPercentage' type='range' />
						</div>
						<div class='range__value'>
							<span>25%</span>
						</div>
					</div>
				</div>
				<div class='buttons'>
					<a id='prev-page' class='button button-primary button-grey'>Back</a>
					<a id='orderButton' class='button button-primary button-blue'>Order</a>
				</div>
			</div>
		</div>
	</div>
</DashboardLayout>

<style lang='scss' is:global>
	.content {
		padding: 16px;
		display: flex;
		flex-direction: column;
		gap: 24px;
		height: auto;
		width: calc(100% - 32px);
		overflow-x: hidden;

		.header {
			display: flex;
			align-items: center;
			height: 12dvh;

			.title {
				display: flex;
				align-items: center;
				justify-content: center;
				width: 100%;
				font-size: 32px;
				padding: 0 4px;
				margin: 0;
				font-weight: 400;
				line-height: 32px;
			}

			.actions {
				display: flex;
				justify-content: end;
				flex-grow: 1;
			}
		}

		.order {
			width: auto;
			height: auto;
			overflow-x: hidden;
			display: flex;
			flex-direction: column;
			align-items: center;
			scroll-snap-type: y mandatory;

			&::-webkit-scrollbar {
				width: 0;
				background: none;
			}

			.basic,
			.advanced {
				height: calc(100vh - 24px - 32px - 8vh);
				min-height: calc(100vh - 24px - 32px - 8vh);
				width: 100%;
				display: flex;
				flex-direction: column;
				align-items: center;
				scroll-snap-align: center;
			}

			.basic {
				.buttons {
					display: flex;
					align-items: center;
					gap: 32px;
					position: relative;
					top: 6vh;
				}
			}

			.advanced {
				height: calc(100vh - 8vh);
				min-height: calc(100vh - 8vh);
				padding-top: 5vh;

				.buttons {
					display: flex;
					align-items: center;
					gap: 32px;
					position: relative;
					top: 8vh;
				}

				.colour-picker {
					display: flex;
					flex-direction: column;
					gap: 24px;
					justify-content: center;

					.colour-title {
						text-align: center;
						font-size: 20px;
					}
				}

				.dropdown-input {
					display: flex;
					flex-direction: column;
					gap: 24px;
					justify-content: center;

					.dropdown-title {
						text-align: center;
						font-size: 20px;
					}
					.dropdown-options {
						.outline {
							position: relative;
							width: 100%;
							border-radius: 6px;

							input {
								background-color: var(--background-lighter);
								cursor: pointer;
								min-height: auto;
								padding: 8px 0 8px 0;
								border: 0;
								transition: all 0.2s linear;
								display: block;
								width: 100%;
								font-size: 18px;
								appearance: none;
								border-radius: 6px;
							}
							label {
								position: absolute;
								top: 0;
								max-width: 100%;
								white-space: nowrap;
								overflow: hidden;
								text-overflow: ellipsis;
								left: 10px;
								padding-top: 10px;
								pointer-events: none;
								transform-origin: 0 0;
								transition: all 0.2s ease-in-out;
								margin-bottom: 0;
								display: inline-block;
								font-size: 18px;
							}
						}

						.dropdown {
							position: relative;

							button {
								display: none;
								white-space: nowrap;
							}

							ul {
								transition: 0.2s ease-in-out;
								border-radius: 6px;
								padding-top: 0;
								padding-bottom: 0;
								border: 0;
								list-style: none;
								background-clip: padding-box;
								position: absolute;
								background-color: var(--background-light);
								z-index: 1000;
								opacity: 0;

								li {
									cursor: default;
									font-size: 18px;
									padding: 6px 12px;
									transition: 0.2s ease-in-out;

									&:first-child {
										padding-top: 12px;
										border-top-right-radius: 6px;
										border-top-left-radius: 6px;
									}

									span {
										color: var(--colour-grey);
										line-height: 1.25 !important;
										display: block;
										font-size: 17px;
									}

									&:last-child {
										border-bottom-right-radius: 6px;
										border-bottom-left-radius: 6px;
									}

									&:hover {
										background-color: var(--background-lighter);
									}
								}
							}
						}
					}
				}

				.range-slider {
					display: flex;
					flex-direction: column;
					align-items: center;
					justify-content: center;
					gap: 32px;

					.range-header {
						display: flex;
						flex-direction: column;
						gap: 8px;
						text-align: center;
						font-size: 20px;

						span.secondary-text {
							font-size: 18px;
							color: var(--colour-grey);
						}
					}

					input::-moz-focus-inner,
					input::-moz-focus-outer {
						border: 0;
					}

					.range {
						display: flex;
						flex-direction: row;
						align-items: center;
						width: 100%;

						.range__value {
							width: 20%;
							height: 200%;
							margin-left: 45px;
							display: flex;
							justify-content: center;
							align-items: center;
							border-left: var(--grey) 1px solid;

							span {
								font-size: 19px;
							}
						}

						.range__slider {
							width: 70%;

							label {
								margin-bottom: 10px;
							}

							& [type='range'] {
								width: 100%;
								-webkit-appearance: none;
								height: 13px;
								border-radius: 6px;
								background: var(--colour);
								outline: none;
								padding: 0;
								margin: 0;
							}

							& [type='range']::-webkit-slider-thumb {
								-webkit-appearance: none;
								appearance: none;
								width: 25px;
								height: 25px;
								border-radius: 50%;
								background: var(--blue);
								cursor: pointer;
								-webkit-transition: background 0.15s ease-in-out;
								transition: background 0.15s ease-in-out;
							}

							& [type='range']::-webkit-slider-thumb:hover {
								background-color: var(--blue-darker);
							}

							& [type='range']::-moz-range-thumb {
								width: 20px;
								height: 20px;
								border: 0;
								border-radius: 50%;
								background: var(--blue);
								cursor: pointer;
								-webkit-transition: background 0.15s ease-in-out;
								transition: background 0.15s ease-in-out;
							}

							& [type='range']::-moz-range-thumb:hover {
								background-color: var(--blue-darker);
							}
						}
					}
				}
			}
		}
	}

	@keyframes gradient {
		0% {
			background-position: 0 0;
		}
		100% {
			background-position: 100% 0;
		}
	}

	.color-checkboxes {
		place-self: center;
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		gap: 16px;
	}
	.color-checkbox {
		width: 32px;
		height: 32px;
		box-sizing: border-box;
		// margin-right: 16px;
		// margin-bottom: 16px;
		position: relative;

		border-radius: 50%;

		transition: transform 0.1s linear;

		&.bordered {
			box-shadow: 0 0 0 2px #f0f0f0 inset;

			&::after {
				border-color: black;
			}
		}

		&.unavailable {
			filter: grayscale(0.4) opacity(0.3);

			&::before {
				content: '';
				position: absolute;
				background-color: var(--colour);
				width: 2px;
				left: 16px;
				top: 1px;
				border: none;
				height: 31px;
				transform: rotateZ(45deg);
			}
		}

		&::after {
			content: '';
			display: block;
			width: calc(16px / 2.4);
			height: calc(16px / 1.2);
			position: absolute;
			top: calc(16px / 2.66);
			left: calc(16px / 1.33);

			border: 2px solid white;
			border-width: 0 2px 2px 0;
			transform: rotate(45deg);
			opacity: 0;

			transition: opacity 0.1s;
		}

		&:hover,
		.color-checkbox__input:focus + & {
			transform: scale(1.2);
		}

		.color-checkbox__input:checked + & {
			&::after {
				opacity: 1;
			}
		}
	}
	.color-checkbox__input {
		visibility: hidden;
		width: 0;
		pointer-events: none;
		position: absolute;
	}
</style>

<script defer define:vars={{ availableColoursRAW: availableColoursJSON }}>
	//#region
	const email = document.getElementById('userEmail');
	const errorTooltip = document.querySelector('#anim .tooltip');
	const form = document.querySelector('form');

	email.addEventListener('input', event => {
		if (email.value) {
			const regexMatch = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email.value);
			if (regexMatch) {
				errorTooltip.setAttribute('data-tooltip', '');
				errorTooltip.style.opacity = 0;
			} else {
				errorTooltip.style.opacity = 1;
				errorTooltip.setAttribute('data-tooltip', 'Email is invalid.');
			}
		} else {
			errorTooltip.style.opacity = 1;
			errorTooltip.setAttribute('data-tooltip', 'Enter a valid email.');
		}
	});
	//#endregion

	//#region
	const dropArea = document.getElementById('drop-area');
	const inputFile = document.getElementById('fileInput');

	inputFile.addEventListener('change', upload);

	function upload(event) {
		let uploaded = document.querySelector('.controls .uploaded');
		let uploadedText = document.querySelector('.controls .uploaded h3 span');
		let uploadedDescription = document.querySelector('.controls .uploaded p');
		let uploadedFiles = inputFile.files;
		uploaded.style.display = 'block';
		uploadedText.textContent = uploadedFiles[0].name;
		console.log(uploadedFiles[0]);
		uploadedDescription.textContent = `Size: ${formatFileSize(uploadedFiles[0].size, false, 2)} (${uploadedFiles[0].size} bytes)`;
	}
	dropArea.addEventListener('dragover', event => {
		event.preventDefault();
	});
	dropArea.addEventListener('drop', event => {
		event.preventDefault();
		inputFile.files = event.dataTransfer.files;
	});
	//#endregion

	//#region
	document.getElementById('orderButton').addEventListener('click', validateAndSend);

	function validateAndSend(event) {
		const fileInput = document.getElementById('fileInput');
		const file = fileInput.files[0];
		const userEmail = document.getElementById('userEmail').value;
		const customMessage = document.getElementById('customMessage').value;
		let colour = '';

		document.querySelectorAll('.order .colour-picker .color-checkbox__input').forEach(input => {
			if (input.checked) {
				colour = input.nextSibling.classList[0];
				return;
			}
		});

		const plasticType = document.getElementById('plasticType').textContent === 'Plastic type' ? null : document.getElementById('plasticType').textContent;
		const layerHeight = document.getElementById('layerHeight').textContent === 'Layer height' ? null : document.getElementById('layerHeight').textContent;
		const infill = document.getElementById('infillPercentage').value;

		if (file && userEmail && colour && plasticType && layerHeight && infill) {
			try {
				const maxSize = 20 * 1024 * 1024; // 20MB
				if (file.size > maxSize) {
					showModal('fileSize');
					return;
				}

				const reader = new FileReader();
				reader.onload = event => {
					const fileData = event.target.result.split(',')[1];
					const fileName = file.name;
					const mimeType = file.mimetype;
					const jsonData = { fileData, fileName, mimeType, userEmail, customMessage, colour, plasticType, layerHeight, infill };

					fetch('/api/order', {
						method: 'POST',
						headers: {
							Accept: 'application/json',
						},
						body: JSON.stringify(jsonData),
					})
						.then(response => response.text())
						.then(data => {
							console.log('File sent successfully. File ID:', data.fileId);
						})
						.catch(error => console.error('Error:', error));
				};
				reader.readAsDataURL(file);

				window.location.pathname = '/dashboard/orders';
			} catch (error) {
				console.log('An error occured: ' + error.message + '\n' + error);
			}
		} else {
			showModal('fillInputsError');
		}
	}
	//#endregion

	//#region

	function formatFileSize(bytes, si = false, dp = 1) {
		const thresh = si ? 1000 : 1024;
		if (Math.abs(bytes) < thresh) {
			return bytes + ' B';
		}
		const units = si ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
		let u = -1;
		const r = 10 ** dp;
		do {
			bytes /= thresh;
			++u;
		} while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);
		return bytes.toFixed(dp) + ' ' + units[u];
	}

	//#endregion

	//#region
	const order = document.querySelector('.order');
	order.style.overflow = 'hidden';
	document.getElementById('next-page').addEventListener('click', next);
	document.getElementById('prev-page').addEventListener('click', prev);

	function delay() {
		setTimeout(() => {
			order.style.overflow = 'hidden';
		}, 600);
	}
	function next() {
		order.style.overflow = 'scroll';
		order.scrollBy({ top: 200, behavior: 'smooth' });
		delay();
	}
	function prev() {
		order.style.overflow = 'scroll';
		order.scrollBy({ top: -200, behavior: 'smooth' });
		delay();
	}
	//#endregion

	//#region
	function createColorCheckbox(containerClass, col, hex, border, checked, unavailable) {
		const containers = document.getElementsByClassName(containerClass);

		function createCheckbox(col, hex, border, checked) {
			const cl = col + (border ? ' bordered' : '');
			const id = 'col-' + col;
			const idLabel = 'col-' + col + '-label';

			const input = document.createElement('input');
			if (unavailable) input.disabled = true;
			input.type = 'radio';
			input.id = id;
			input.value = hex ? hex : '#bababa';
			input.name = 'colour';
			if (checked) {
				input.checked = true;
			}
			input.classList.add('color-checkbox__input');

			const label = document.createElement('label');
			label.className = cl + ' color-checkbox' + (unavailable ? ' unavailable' : ''); // Add the "color-checkbox" class here
			label.setAttribute('for', id);
			label.id = idLabel;
			label.style.background = hex;

			// const tooltip = document.createElement('span');
			// tooltip.classList.add('mdl-tooltip');
			// tooltip.setAttribute('for', idLabel);
			// tooltip.textContent = col;

			for (const container of containers) {
				container.appendChild(input.cloneNode(true));
				container.appendChild(label.cloneNode(true));
				// container.appendChild(tooltip.cloneNode(true));
			}
		}

		createCheckbox(col, hex, border, checked);
	}

	let availableColours = JSON.parse(availableColoursRAW);
	for (let i = 0; i < availableColours.length; i++) {
		const colour = availableColours[i];
		createColorCheckbox('color-checkboxes', colour['name'], colour['hex'], colour['blackBorder'], colour['default'], colour['unavailable']);
	}
	//#endregion

	//#region
	const dropdowns = document.querySelectorAll('.dropdown-input');

	function show(dropdown) {
		const dropdownItems = dropdown.querySelectorAll('.dropdown-menu .dropdown-item');
		const dropdownMenu = dropdown.querySelector('.dropdown-menu');
		const myInput = dropdown.querySelector('input');

		dropdownItems.forEach(item => {
			item.style.cursor = 'pointer';
			setTimeout(() => {
				item.style.display = 'block';
			}, 200);
		});

		dropdownMenu.style.opacity = '1';
	}

	function hide(dropdown) {
		const dropdownItems = dropdown.querySelectorAll('.dropdown-menu .dropdown-item');
		const dropdownMenu = dropdown.querySelector('.dropdown-menu');

		dropdownItems.forEach(item => {
			item.style.cursor = 'default';
			setTimeout(() => {
				item.style.display = 'none';
			}, 200);
		});

		dropdownMenu.style.opacity = '0';
	}

	function isOutside(element, dropdown) {
		const myInput = dropdown.querySelector('input');
		const dropdownItems = dropdown.querySelectorAll('.dropdown-menu .dropdown-item');

		if (element === myInput || element === dropdown) return false;

		dropdownItems.forEach(item => {
			if (element === item) return false;
		});

		return true;
	}

	function handleClickOutside(e, dropdown) {
		const dropdownMenu = dropdown.querySelector('.dropdown-menu');

		if (dropdownMenu.style.opacity === '1' && isOutside(e.target, dropdown)) {
			hide(dropdown);
		}
	}

	function handleClick(event, item, dropdown) {
		const dropdownMenu = dropdown.querySelector('.dropdown-menu');
		const label = dropdown.querySelector('label');

		if (dropdownMenu.style.opacity === '1') {
			label.textContent = item.getAttribute('data-value');
		}
	}

	dropdowns.forEach(dropdown => {
		const myInput = dropdown.querySelector('input');
		const dropdownItems = dropdown.querySelectorAll('.dropdown-menu .dropdown-item');

		myInput.addEventListener('click', () => show(dropdown));
		window.addEventListener('click', event => handleClickOutside(event, dropdown));

		dropdownItems.forEach(item => {
			item.addEventListener('click', event => handleClick(event, item, dropdown));
		});
	});

	//#endregion

	//#region
	class RangeSlider {
		constructor(rangeElement, valueElement, options) {
			this.rangeElement = rangeElement;
			this.valueElement = valueElement;
			this.options = options;

			// Attach a listener to "change" event
			this.rangeElement.addEventListener('input', this.updateSlider.bind(this));
		}

		// Initialize the slider
		init() {
			this.rangeElement.setAttribute('min', options.min);
			this.rangeElement.setAttribute('max', options.max);
			this.rangeElement.value = options.cur;

			this.updateSlider();
		}

		// Format the money
		asMoney(value) {
			return '$' + parseFloat(value).toLocaleString('en-US', { maximumFractionDigits: 2 });
		}

		generateBackground(rangeElement) {
			if (this.rangeElement.value === this.options.min) {
				return;
			}

			let percentage = ((this.rangeElement.value - this.options.min) / (this.options.max - this.options.min)) * 100;
			return 'background: linear-gradient(to right, var(--blue-darker), var(--blue) ' + percentage + '%, #d3edff ' + percentage + '%, #dee1e2 100%)';
		}

		updateSlider(newValue) {
			this.valueElement.innerHTML = this.rangeElement.value + '%';
			this.rangeElement.style = this.generateBackground(this.rangeElement.value);
		}
	}

	let rangeElement = document.querySelector('.range [type="range"]');
	let valueElement = document.querySelector('.range .range__value span');

	let options = {
		min: 1,
		max: 100,
		cur: 25,
	};

	if (rangeElement) {
		let slider = new RangeSlider(rangeElement, valueElement, options);

		slider.init();
	}
	//#endregion
</script>
