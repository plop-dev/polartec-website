---
export const prerender = false;
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Order from '../../schemas/order';

interface Order {
	fileName: string;
	plasticType: string;
	colour: string;
	status: string;
	dateOrdered: Date;
	price: any;
}

let orders: Order[] = await Order.find({ userId: Astro.locals.user._id });

function capitaliseFirstLetter(string: string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
}
---

<DashboardLayout title='Orders' sideBarPos={1}>
	<div class='content'>
		<div class='header'>
			<h1 class='title'>Orders</h1>
			<div class='actions'>
				<a href='/dashboard/new-order' class='button button-primary button-blue'>New Order</a>
			</div>
		</div>
		<div class='list'>
			<div class='column-list'>
				<div class='column'>File Name</div>
				<div class='column'>Plastic Type</div>
				<div class='column'>Plastic Colour</div>
				<div class='column'>Status</div>
				<div class='column'>Date Ordered</div>
				<div class='column'>Price</div>
			</div>
			<div class='items'>
				{
					orders.length >= 1 || !orders ? (
						orders.map(order => (
							<div class='item'>
								<div>{order.fileName.split('.')[0]}</div>
								<div>{order.plasticType.toUpperCase()}</div>
								<div class='colour'>{order.colour}</div>
								<div>
									<span class:list={['status', order.status.toLowerCase().split(' ').join('-')]}>{capitaliseFirstLetter(order.status)}</span>
								</div>
								<div>
									{new Date(order.dateOrdered).toLocaleDateString()} at {new Date(order.dateOrdered).toLocaleTimeString()}
								</div>
								<div>{isNaN(order.price) ? 'TBC' : Intl.NumberFormat('en-GB', { style: 'currency', currency: 'GBP' }).format(order.price)}</div>
							</div>
						))
					) : (
						<div id='no-orders'>You haven't ordered anything yet!</div>
					)
				}
			</div>
		</div>
	</div>
</DashboardLayout>

<script>
	document.addEventListener('DOMContentLoaded', event => {
		if (localStorage.getItem('reloaded') !== 'true') {
			startLoad();
			setTimeout(() => {
				window.location.reload();
				stopLoad();
			}, 2000);
		}
		localStorage.setItem('reloaded', 'true');
	});
</script>

<style lang='scss'>
	.content {
		padding: 16px;
		display: flex;
		flex-direction: column;
		gap: 48px;
		height: calc(100% - 32px);
		width: calc(100% - 32px);

		.header {
			height: 12dvh;
			display: flex;
			align-items: center;

			.title {
				display: flex;
				align-items: center;
				justify-content: center;
				width: 100%;
				font-size: 32px;
				padding: 0 4px;
				margin: 0;
				font-weight: 400;
				line-height: 32px;
			}

			.actions {
				position: fixed;
				right: 16px;
			}
		}

		.list {
			height: 100%;
			width: 100%;
			max-width: 100%;
			overflow: auto;

			#no-orders {
				text-align: center;
				font-size: 22px;
				padding: 32px 0;
			}

			.column-list {
				display: flex;
				align-items: center;
				border-top-left-radius: 6px;
				border-top-right-radius: 6px;
				position: sticky;
				top: 0;
				background-color: var(--background-light);

				.column {
					flex: 1;
					padding: 8px 16px;
					display: flex;
					align-items: center;
				}
			}

			.item {
				display: flex;
				align-items: center;
				transition: 0.15s cubic-bezier(0.445, 0.05, 0.55, 0.95);
				height: 50px;

				& > div {
					flex: 1;
					padding: 8px 16px;
					display: flex;
					align-items: center;

					span.status {
						border-radius: 4px;
						display: flex;
						align-items: center;
						padding: 4px 8px;
						font-size: 12px;

						&::before {
							content: '';
							width: 4px;
							height: 4px;
							border-radius: 50%;
							margin-right: 4px;
						}

						&.delivered,
						&.preparing {
							color: var(--blue);
							background-color: #2182b357;

							&::before {
								background-color: var(--blue);
							}
						}

						&.printed {
							color: var(--green);
							background-color: #2dbd7e38;

							&::before {
								background-color: var(--green);
							}
						}

						&.printing {
							color: var(--orange);
							background-color: #e6864645;

							&::before {
								background-color: var(--orange);
							}
						}

						&.check-emails {
							color: var(--red);
							background-color: #dd243352;

							&::before {
								background-color: var(--red);
							}
						}

						&.order-sent {
							color: var(--grey);
							background-color: #545c6c5c;

							&::before {
								background-color: var(--grey);
							}
						}
					}
				}

				&:hover {
					background-color: var(--background-light);
				}

				&:last-child {
					border-bottom-left-radius: 6px;
					border-bottom-right-radius: 6px;
				}
			}
		}
	}
</style>
