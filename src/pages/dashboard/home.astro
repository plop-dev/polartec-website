---
export const prerender = false;
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Order from '../../schemas/order';
import availableColours from '../../tools/availableColours';

interface Plastic {
	name: string;
	unavailable?: boolean;
}
const availablePlastics: Plastic[] = [{ name: 'PLA' }, { name: 'PTEG', unavailable: true }];

interface Order {
	fileName: string;
	plasticType: string;
	colour: string;
	status: string;
	dateOrdered: Date;
	price: any;
}
const orders: Order[] = await Order.find({ userId: Astro.locals.user._id });
const recentOrder: Order = orders[0];
---

<DashboardLayout title='Dashboard' sideBarPos={0}>
	<div class='content'>
		<div class='header'>
			<h1 class='title'>Home</h1>
			<div class='actions'></div>
		</div>
		<div class='sections'>
			<section>
				<div class='section-header'>New Order</div>
				<div class='section-content'>
					<div class='option'>
						<h1>Available Colours</h1>
						<ul class='available-colours'>
							{
								availableColours.map(colour => (
									<li data-colour={colour.hex} class:list={[colour.unavailable ? 'unavailable' : '', colour.blackBorder ? 'black-text' : '']}>
										{colour.name}
									</li>
								))
							}
						</ul>
					</div>
					<div class='option'>
						<h1>Available Plastics</h1>
						<ul>
							{availablePlastics.map(plastic => <li class:list={[plastic.unavailable ? 'unavailable' : '']}>{plastic.name}</li>)}
						</ul>
					</div>
				</div>
			</section>

			<section>
				<div class='section-header'>Orders</div>
				<div class='section-content'>
					<div class='recent'>
						<h2>Recent Order</h2>
						{
							recentOrder ? (
								<div class='order-card' onclick="window.location.pathname = '/dashboard/orders'">
									<h3>{recentOrder.fileName.split('.')[0]}</h3>
									<div class='details'>
										<span>{recentOrder.fileName.split('.')[1].toUpperCase()}</span>
										<span>{recentOrder.plasticType.toUpperCase()}</span>
										<span>{recentOrder.colour}</span>
										<span>{recentOrder.dateOrdered.toLocaleDateString()}</span>
									</div>
								</div>
							) : (
								<div id='noRecent'>
									You haven't ordered yet!<span>Order now</span>
								</div>
							)
						}
					</div>
				</div>
			</section>

			<section>
				<div class='section-header'>Support</div>
				<div class='section-content'>
					<div class='contact-options'>
						<div class='contact-email'>
							<h3>Contact us by email at</h3>
							<span>Contact.PolarTec@gmail.com</span>
						</div>
						<div class='contact-discord'>
							<h3>Contact us on discord</h3>
							<span>plop_dev <strong>or</strong> itsarctic</span>
						</div>
					</div>
				</div>
			</section>
		</div>
	</div>
</DashboardLayout>

<style lang='scss'>
	.content {
		padding: 16px;
		display: flex;
		flex-direction: column;
		gap: 24px;
		height: calc(100% - 32px);
		width: calc(100% - 32px);

		.header {
			display: flex;
			align-items: center;
			height: 12dvh;

			.title {
				display: flex;
				align-items: center;
				justify-content: center;
				width: 100%;
				font-size: 32px;
				padding: 0 4px;
				margin: 0;
				font-weight: 400;
				line-height: 32px;
			}

			.actions {
				display: flex;
				justify-content: flex-end;
				flex-grow: 1;
			}
		}

		.sections {
			display: grid;
			grid-template-columns: 1fr 1fr 1fr;
			align-items: center;
			justify-content: center;
			width: calc(100% - 48px);
			height: calc(calc(100% - 48px) / 1.5);
			gap: 36px;
			padding: 24px;
			margin: auto 0;
			overflow: hidden;

			@media (max-width: 1200px) {
				grid-template-columns: auto;
				grid-template-rows: 1fr 1fr 1fr;
				margin: 0;
				height: auto;
				overflow-y: scroll;

				section {
					min-height: 50vh;
					min-width: 60vw;
				}
			}

			section {
				display: flex;
				flex-direction: column;
				align-items: center;
				border-radius: 6px;
				border: 4px solid var(--background-light);
				height: 100%;
				gap: 24px;

				.section-header {
					font-size: 24px;
					text-align: center;
					font-weight: 600;
					padding: 12px 0;
				}

				.section-content {
					display: flex;
					flex-direction: column;
					align-items: center;
					gap: 24px;

					.option {
						h1 {
							font-size: 22px;
							font-weight: 400;
							margin-bottom: 16px;
						}

						ul {
							list-style: none;
							display: flex;
							flex-direction: column;
							align-items: center;
							gap: 8px;

							li {
								font-size: 17px;
								border-radius: 6px;
								padding: 4px 8px;
								background-color: var(--background-light);

								&.black-text {
									color: #2a2a2a;
								}

								&.unavailable {
									filter: grayscale(0.4) opacity(0.4);
								}
							}
						}
					}

					.recent {
						display: flex;
						flex-direction: column;
						justify-content: center;
						align-items: center;
						gap: 16px;

						.order-card {
							border-radius: 6px;
							box-sizing: border-box;
							background-color: var(--background-light);
							border: 3px solid transparent;
							cursor: pointer;
							transition: 0.3s ease-in-out;
							padding: 16px;

							.details {
								margin-top: 8px;
								display: grid;
								place-items: center;
								grid-template-columns: 1fr 1fr;
								grid-template-rows: 1fr 1fr;
								gap: 8px;
							}

							&:hover {
								background-color: transparent;
								border: 3px solid var(--background-light);
							}
						}

						#noRecent {
							font-size: 22px;
							font-weight: 600;
							text-align: center;
						}
					}

					.contact-options {
						display: flex;
						flex-direction: column;
						align-items: center;
						justify-content: center;
						gap: 32px;

						& > div {
							display: flex;
							flex-direction: column;
							align-items: center;
							gap: 8px;

							span {
								color: var(--accent);
							}

							&:first-child {
								padding-bottom: 32px;
								border-bottom: 2px solid var(--background-lighter);
							}
						}
					}
				}
			}
		}
	}
</style>

<script>
	function _def() {
		document.querySelectorAll('ul.available-colours li').forEach((colour: HTMLElement) => {
			colour.style.backgroundColor = colour.getAttribute('data-colour');
		});
	}
	document.addEventListener('astro:after-swap', _def);
	document.addEventListener('DOMContentLoaded', _def);
</script>
